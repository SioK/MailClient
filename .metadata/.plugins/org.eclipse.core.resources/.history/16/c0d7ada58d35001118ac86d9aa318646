package de.bht.fpa.mail.s769161;

import org.eclipse.jface.action.GroupMarker;
import org.eclipse.jface.action.ICoolBarManager;
import org.eclipse.jface.action.IMenuManager;
import org.eclipse.jface.action.IToolBarManager;
import org.eclipse.jface.action.MenuManager;
import org.eclipse.jface.action.Separator;
import org.eclipse.jface.action.ToolBarContributionItem;
import org.eclipse.jface.action.ToolBarManager;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.swt.SWT;
import org.eclipse.ui.IWorkbenchActionConstants;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.actions.ActionFactory;
import org.eclipse.ui.actions.ActionFactory.IWorkbenchAction;
import org.eclipse.ui.application.ActionBarAdvisor;
import org.eclipse.ui.application.IActionBarConfigurer;

import de.bht.fpa.mail.manager.ClientManager;
import de.bht.fpa.mail.s769161.actions.OpenRootDirectoryAction;
import de.bht.fpa.mail.s769161.actions.SynchronizeImapFolderAction;
import de.bht.fpa.mail.s769161.preferences.FileSystemSettings;

/**
 * An action bar advisor is responsible for creating, adding, and disposing of
 * the actions added to a workbench window. Each window will be populated with
 * new actions.
 */
public class ApplicationActionBarAdvisor extends ActionBarAdvisor {

  // Actions - important to allocate these only in makeActions, and then use
  // them
  // in the fill methods. This ensures that the actions aren't recreated
  // when fillActionBars is called with FILL_PROXY.
  private IWorkbenchAction exitAction;
  private IWorkbenchAction aboutAction;
  private IWorkbenchAction newWindowAction;
  private OpenRootDirectoryAction openRootDirectoryAction;
  private SynchronizeImapFolderAction synchronizeImapFolderAction;
  private IWorkbenchAction preferenceAction;

  public ApplicationActionBarAdvisor(IActionBarConfigurer configurer) {
    super(configurer);
  }

  @Override
  protected void makeActions(final IWorkbenchWindow window) {
    // Creates the actions and registers them.
    // Registering is needed to ensure that key bindings work.
    // The corresponding commands keybindings are defined in the plugin.xml
    // file.
    // Registering also provides automatic disposal of the actions when
    // the window is closed.

    exitAction = ActionFactory.QUIT.create(window);
    register(exitAction);

    aboutAction = ActionFactory.ABOUT.create(window);
    register(aboutAction);

    openRootDirectoryAction = new OpenRootDirectoryAction(window, "Set Base Directory");
    register(openRootDirectoryAction);

    synchronizeImapFolderAction = new SynchronizeImapFolderAction(window, "Synchronize Mail Folder");
    register(synchronizeImapFolderAction);

    newWindowAction = ActionFactory.OPEN_NEW_WINDOW.create(window);
    register(newWindowAction);

    preferenceAction = ActionFactory.PREFERENCES.create(window);
    register(preferenceAction);

  }

  @Override
  protected void fillMenuBar(IMenuManager menuBar) {
    MenuManager fileMenu = new MenuManager("&File", IWorkbenchActionConstants.M_FILE);
    MenuManager preferences = new MenuManager("&Window", IWorkbenchActionConstants.M_WINDOW);
    MenuManager helpMenu = new MenuManager("&Help", IWorkbenchActionConstants.M_HELP);

    menuBar.add(fileMenu);
    // Add a group marker indicating where action set menus will appear.
    menuBar.add(preferences);
    menuBar.add(new GroupMarker(IWorkbenchActionConstants.MB_ADDITIONS));
    menuBar.add(helpMenu);

    // File
    fileMenu.add(openRootDirectoryAction);
    fileMenu.add(synchronizeImapFolderAction);
    fileMenu.add(new Separator());
    fileMenu.add(newWindowAction);
    fileMenu.add(new Separator());
    fileMenu.add(exitAction);

    // Preferences
    preferences.add(preferenceAction);

    // Help
    helpMenu.add(aboutAction);
  }

  @Override
  protected void fillCoolBar(ICoolBarManager coolBar) {
    IToolBarManager toolbar = new ToolBarManager(SWT.FLAT | SWT.RIGHT);
    coolBar.add(new ToolBarContributionItem(toolbar, "main"));
    toolbar.add(openRootDirectoryAction);
    toolbar.add(synchronizeImapFolderAction);

  }

}
