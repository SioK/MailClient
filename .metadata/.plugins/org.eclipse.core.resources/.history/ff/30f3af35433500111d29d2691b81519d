package de.bht.fpa.mail.s769161.imapnavigation.handler;

import java.util.List;

import javax.mail.MessagingException;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Query;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.core.runtime.jobs.Job;

import de.bht.fpa.mail.common.MailHelper;
import de.bht.fpa.mail.common.PersistenceManager;
import de.bht.fpa.mail.common.model.Account;
import de.bht.fpa.mail.common.model.Folder;

public class IMAPHandler {

	private Account account;

	public void synchronizeFolders() {

		Job job = new Job("syncFolders") {

			@Override
			protected IStatus run(IProgressMonitor monitor) {

				System.out.println("begin pull");

				EntityManager entityManager = getEntityManager();

				createAccount(entityManager);

				try {
					MailHelper.syncAllFolders(account, entityManager);
				} catch (MessagingException e) {
					e.printStackTrace();
				}

				System.out.println("Account: " + account);

				entityManager.close();
				
				return Status.OK_STATUS;
			}
		};
		
		job.schedule();
	    if (job.getResult() == Status.OK_STATUS) {
	      job.cancel();
	    }

	}

	public List<Folder> getFolders() {

		EntityManager entityManager = getEntityManager();
		createAccount(entityManager);
		return account.getFolders();
	}

	public void createAccount(EntityManager entityManager) {

		account = MailHelper.getAccount(entityManager, "googlemail");
		if (account == null) {
			account = new Account();
			account.setName("googlemail");
			account.setHost("imap.gmail.com");
			account.setUsername("siokdub@googlemail.com");
			account.setPassword("myimmortal1");

			entityManager.getTransaction().begin();
			entityManager.persist(account);
			entityManager.getTransaction().commit();

			System.out.println("Created new account");

		} else {
			System.out.println("Use existing account");

		}
	}

	public EntityManager getEntityManager() {

		EntityManagerFactory entityManagerFactory = PersistenceManager
				.getInstance().createEntityManagerFactory();
		EntityManager entityManager = entityManagerFactory
				.createEntityManager();

		return entityManager;

	}

}
